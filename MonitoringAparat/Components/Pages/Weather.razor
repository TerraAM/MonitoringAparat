@page "/weather"
@attribute [StreamRendering]

<PageTitle>TimeList</PageTitle>

<h1>TimeList</h1>

<p>Regulations Line 1.</p>

@if (forecasts == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Date</th>
                <th>Part</th>
                <th>SummaryTime</th>
                <th>Status</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var forecast in forecasts)
            {
                <tr>
                    <td>@forecast.Date.ToShortDateString()</td>
                    <td>@forecast.Part</td>
                    <td>@forecast.SummaryTime</td>
                    <td>@forecast.Status</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private WeatherForecast[]? forecasts;

    protected override async Task OnInitializedAsync()
    {
        // Simulate asynchronous loading to demonstrate streaming rendering
        await Task.Delay(500);

        var startDate = DateOnly.FromDateTime(DateTime.Now);
        var summaries = new[] {  "Cool", "Bad", "Not bad"};
        forecasts = Enumerable.Range(1, 5).Select(index => new WeatherForecast
        {
            Date = startDate.AddDays(index),
            Part = Random.Shared.Next(-20, 55),
               // Line = Random.Shared.Next(-20, 55),
                Status = summaries[Random.Shared.Next(summaries.Length)],
                SummaryTime = Random.Shared.Next(-20, 55)
        }).ToArray();
    }

    private class WeatherForecast
    {
        public DateOnly Date { get; set; }
        public int Part { get; set; }
        public string Status { get; set; }
        public int SummaryTime { get; set; }
       // public int Line { get; set; }
    }
}
